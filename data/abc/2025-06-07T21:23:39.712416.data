environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\bryan\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'PREDATOR', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'EFC_35476_1262719628': '1', 'EFC_35476_1592913036': '1', 'EFC_35476_2283032206': '1', 'EFC_35476_2775293581': '1', 'EFC_35476_3789132940': '1', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\bryan', 'LOCALAPPDATA': 'C:\\Users\\bryan\\AppData\\Local', 'LOGONSERVER': '\\\\PREDATOR', 'NUMBER_OF_PROCESSORS': '20', 'ONEDRIVE': 'C:\\Users\\bryan\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\bryan\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\bryan\\anaconda3;C:\\Users\\bryan\\anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\bryan\\anaconda3\\Library\\usr\\bin;C:\\Users\\bryan\\anaconda3\\Library\\bin;C:\\Users\\bryan\\anaconda3\\Scripts;C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Program Files\\Microsoft\\jdk-11.0.12.7-hotspot\\bin;C:\\Program Files (x86)\\VMware\\VMware Player\\bin\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\Microsoft SQL Server\\150\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\dotnet\\;C:\\Users\\bryan\\.cargo\\bin;C:\\Users\\bryan\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Users\\bryan\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\bryan\\.dotnet\\tools;C:\\Program Files\\Elastic\\Beats\\8.6.1', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 154 Stepping 3, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9a03', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\bryan\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\bryan\\AppData\\Local\\Temp', 'USERDOMAIN': 'PREDATOR', 'USERDOMAIN_ROAMINGPROFILE': 'PREDATOR', 'USERNAME': 'bryan', 'USERPROFILE': 'C:\\Users\\bryan', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', 'CONDA_PREFIX': 'C:\\Users\\bryan\\anaconda3', 'LANG': 'en', 'SPYDER_ARGS': '[]', 'QT_SCALE_FACTOR': '', 'QT_SCREEN_SCALE_FACTORS': '', 'SPYDER_DEBUG_FILE': 'C:\\Users\\bryan\\.spyder-py3\\spyder-debug.log', 'SPY_EXTERNAL_INTERPRETER': 'False', 'SPY_UMR_ENABLED': 'True', 'SPY_UMR_VERBOSE': 'True', 'SPY_UMR_NAMELIST': '', 'SPY_RUN_LINES_O': '', 'SPY_PYLAB_O': 'True', 'SPY_BACKEND_O': '0', 'SPY_AUTOLOAD_PYLAB_O': 'False', 'SPY_FORMAT_O': '0', 'SPY_BBOX_INCHES_O': 'True', 'SPY_RESOLUTION_O': '72', 'SPY_WIDTH_O': '6', 'SPY_HEIGHT_O': '4', 'SPY_USE_FILE_O': 'False', 'SPY_RUN_FILE_O': '', 'SPY_AUTOCALL_O': '0', 'SPY_GREEDY_O': 'False', 'SPY_JEDI_O': 'False', 'SPY_SYMPY_O': 'False', 'SPY_TESTING': 'False', 'SPY_HIDE_CMD': 'True', 'SPY_PYTHONPATH': '', 'JPY_INTERRUPT_EVENT': '5316', 'IPY_INTERRUPT_EVENT': '5316', 'JPY_PARENT_PID': '5320', 'PYDEVD_USE_FRAME_EVAL': 'NO', 'TERM': 'xterm-color', 'CLICOLOR': '1', 'FORCE_COLOR': '1', 'CLICOLOR_FORCE': '1', 'PAGER': 'cat', 'GIT_PAGER': 'cat', 'MPLBACKEND': 'module://matplotlib_inline.backend_inline'})